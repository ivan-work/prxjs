section
  section
    h3 Simple example
    div
      +code
        div.muted //step 1
        | const doOnUnsubscribeCallback = ...
        | const doOnSubscribeCallback = ...
        div.muted // step 2
        | const observable$ = new Rx.Observable(doOnSubscribeCallback);
        div.muted.
          //observable$ = {
          //  _subscribe: doOnSubscribeCallback
          //}
        div.muted // step 3
        | observable$.subscribe(someObserver);
    aside.notes
      p Now that you know it, let's look at simple example of Observable workflow.
      p 3 steps:
      p on step one - we're defining callbacks - nothing much happens there
      p on step two we're creating Observable and it returns us simple object with our callback set as private _subscribe field
      p and all the stuff happens on step 3. let's look closer
  section
    h3 Simple subscribe
    +code
      | observable$.subscribe(whatever) {
      |   const subscriber = toSubscriber(whatever)
      |   if (this.operator) { #[span.muted // this === observable$]
      div.muted     subscriber.add(operator.call(subscriber, this.source));
      |   } else {
      div.green
        |     subscriber.add(this._subscribe(subscriber));
      |   }
      |   return subscriber;
      | }
    .fragment.replace-out
      +js.
        const toSubscriber = (whatever) => {
          if (whatever instanceof Subscriber) {
            return whatever;
          } else {
            return new Subscriber(whatever);
          }
        }
    img.fragment.fade-in(src='img/Subscriber.svg' width=600)
  section
    h3 What that means
    ul
      //li Observable is an Object: it's either #[code.hljs {_subscribe: function}] or #[code.hljs {source: sourceObservable, operator: someOperator}]
      li Two types of Observable:
        br
        | 1: Holds callback
        br
        | 2: "Operator Observable" - holds Operator and link to the source Observable
      li When we subscribe, we convert our Observer to Subscriber, adding state and giving ability to manage subscriptions
      li .subscribe returns whole Subscriber
        .bigger.fragment
          +code.
            #[span.red // Don't try this at home!]
            const obs$ = new Rx.Observable((subscriber) => {});
            const subscription = obs$
              .subscribe((value) => console.log(`next(${value})`));
            #[span.red subscription.next('hack'); // outputs next(hack);]
  section
    h3 Setup with Operators
    img(src='img/workflow/operator-setup-title.svg')
  section
    h3 Subscribe with Operators
    img(src='img/workflow/operator-subscribe-title.svg' height=200)
    +code
      | observable$.subscribe(whatever) {
      |   const subscriber = toSubscriber(whatever)
      |   if (this.operator) { #[span.muted // this === observable$]
      div.green     subscriber.add(operator.call(subscriber, this.source));
      |   } else {
      div.muted ...
    .small
      +js.
        class MapOperator<T> implements Operator<T, T> {
          call(subscriber: Subscriber, source: Observable) {
            return source.subscribe(new MapSubscriber(subscriber, ...));
          }
        }
  section
    h3 Operators are:
    ul
      li OperatorCreator functions:
        code.hljs (project) => Operation
      li Operation functions:
        code.hljs (source: Observable) => Observable
      li Operators itself:
        code.hljs.
          (subscriber, source: Observable) =>#[br]&nbsp;&nbsp;source.subscribe(new Subscriber(subscriber))
  section
    h3 Brace yourself
    .center
      img(src='img/nedstark.jpg')
  section
    h3 Subscribe with operators
      .fragment.replace-out: img(src='img/workflow/subscribe1.svg')
      .fragment.replace-in-out: img(src='img/workflow/subscribe2.svg')
      .fragment.replace-in-out: img(src='img/workflow/subscribe3.svg')
      .fragment.replace-in-out: img(src='img/workflow/subscribe4.svg' height=600)
      .fragment.fade-in: img(src='img/workflow/subscribe5.svg' height=600)
  section
    h3 Yay!
    ul.fragment
      li Observables are chained through the .source
      li Subscribers are chained through the .destination
      li Unsubscription logic is backward-chained through Subscribers
