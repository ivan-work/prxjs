section
  section(data-menu-title='Observables')
    h3 Example
    .fragment.replace-out(data-fragment-index=3).bigger
      +js.
        // traditional
        document.addEventListener('keydown', () =>
          console.log('Key down!'));
        // reactiveX
        Rx.Observable.fromEvent(document, 'keydown')
          .subscribe(() => console.log('Key down!'));
    .fragment.replace-in-out(data-fragment-index=3).big
      +js.
        const input$ = Rx.fromEvent(document, 'keydown')
          .pipe(pluck('key'), share());

        input$.subscribe(key => outputNicely(key));

        input$.pipe(
          bufferCount(5, 1)
          , filter(buffered => buffered.join('') === 'param')
        ).subscribe(keys => outputNicely('PAM PAM'))
    .fragment.replace-in-out(data-fragment-index=4).big
      +js.
        const input$ = Rx.fromEvent(document, 'keydown')
          .pipe(#[span.red pluck('key')], #[span.red share()]);

        input$.subscribe(key => outputNicely(key));

        input$.pipe(
          #[span.red bufferCount(5, 1)]
          , #[span.red filter(buffered => buffered.join('') === 'param')]
        ).subscribe(keys => outputNicely('PAM PAM'))
    .fragment.replace-in-out(data-fragment-index=5).big
      +js.
        const input$ = Rx.fromEvent(document, 'keydown')
          .pipe(#[span.red pluck('key')], #[span.red share()]);

        #[span.blue input$.subscribe](key => outputNicely(key));

        #[span.blue input$].pipe(
          bufferCount(5, 1)
          , filter(buffered => buffered.join('') === 'param')
        )#[span.blue .subscribe](keys => outputNicely('PAM PAM'))
    div(style='height:300px')
    aside.notes
      p Many introductions to Rx show this code as example of Rx benefits
      p I think that this is a bit misleading, because there's no real benefit or organisation going on when you're using Observables just to
      p If i was writing introduction to observable, I'd give this code as example
      p Yes, it's a bit more complicated, but here we have all the main points
      p 4. We actually show that we can map observables
      p 5. Also we show that with observables, we can "Organize multiple events" - if we need keypress event to do two separate things, we can do it easily
      p Let's look at this example live

  section(data-capture=1)
    h2 Practice!
    +js.
      const input$ = Rx.fromEvent(document, 'keydown')
       .pipe(pluck('key'), share());

      input$.subscribe(key => outputNicely(key));

      input$.pipe(
        bufferCount(5, 1)
        , filter(buffered => buffered.join('') === 'param')
      ).subscribe(keys => outputNicely('PAM PAM'))
    #parampampam(style='height: 200px')
      p type 'param':
      div#pam
      div#pampam
    aside.notes
      p We have same code here, and if I press some keys it'll output them: QWEQWE
      p and we want it to print simple "pam pam" whenever we type 'param'
      p This is not rocket science, but still quite complex behavior that we were able to achieve in seven lines of code

  section(data-menu-title='#todo possibly remove')
    .small
      +code.
        const pam = document.getElementById('pam');
        const pampam = document.getElementById('pampam');
        const input$ = Rx.fromEvent(document, 'keydown', true)
          .pipe(
            #[span.green-dark op.filter(() => Reveal.getCurrentSlide().getAttribute('data-capture'))]
            #[span.green-dark , op.filter(({keyCode}) => 65 <= keyCode && keyCode <= 90)]
            #[span.green-dark , op.tap(e => e.stopImmediatePropagation())]
            , op.pluck('key')
            , op.share()
          );

        input$.subscribe(key => createFadingElement(pam, key));

        input$.pipe(
          op.bufferCount(5, 1)
          , op.filter(buffered => buffered.join('') === 'param')
        ).subscribe(e => createFadingElement(pampam, 'PAM-PAM!'));
    aside.notes
      p ??? Well, to be honest, I cheated a bit, here's real and full code to make this example work:
      p The main addition are these 3 green lines to take away keyboard control from my presentation library












