section
  section
    h3 What are Rx.Observables?
    .sided-no-bg Observable is a representation of any set of values over any amount of time. This is the most basic building block of RxJS
    aside.notes
      p Ok, back to Observables. All slides before we were talking about the concept of observables, now let's look at the implementation in the Rx
      p They have Observable interface and they make it pretty clear what is it.
  section
   h2 Rx.Observable
   p.sided-no-bg.fragment.fade-in-then-semi-out A representation of any set of values over any amount of time. This is the most basic building block of RxJS
   .fragment.fade-in-then-out
     //+js.
     //  p Maps each source value to the given Observable innerObservable regardless of the source value, and then flattens those resulting Observables into one single Observable, which is the output Observable. The output Observables emits values only from the most recently emitted instance of innerObservable.
     //  p.right.small © .switchMapTo API documentation
     code.hljs.smaller.
       Maps each source value to the given Observable innerObservable regardless of the source value, and then flattens those resulting Observables into one single Observable, which is the output Observable.

       The output Observables emits values only from the most recently emitted instance of innerObservable.

       #[.right.small © .switchMapTo API documentation]
   aside.notes
     p After we saw what is the point of observables, let's dive deeper into ReactiveX
     p The most basic building block of Rx is, of course, Observable - A representation of any set of values over any amount of time.
     p #todo get another example? remove?
     p 1. I advise you to remember it well.
     p Do you recall that example from documentation?
     p First advice - if you ever feel dizzy reading this - you may remember than Observable is just a set of values over time and starting from that ground work your way to parse this
     p Let's start from basics
  section
    h2 Observable workflow
    +mermaid(w=600 h=300).
      graph TD
      subscribeFn(Subscribe function) ==> createObservable(Observable)
      unsubscribeFn(Unsubscribe function) ==> createObservable(Observable)
      createObservable --> Observer
  section
    h2 Observable class
    +js.
      class Rx.Observable {
        private _isScalar: boolean
        private source: Observable
        private operator: Operator

        constructor(subscribeFunction) {...}
        lift(operator) {...}
        subscribe(observer) {...}
        pipe(observer) {...}
      }
    //+mermaid(w=200 h=200 s=2).
      classDiagram
      class Observable {
         _isScalar: boolean
        source: Observable
        operator: Operator
        constructor ( SubscribeFn )
        lift ( Operator )
        subscribe ( Observer )
        pipe ( Observer )
      }
    aside.notes
      p Let's take a look what is this "basic building block".
      p I've tried to distill this as much as possible and here's what I have.
      p Let's start from constructor


  section
    +js
      include:escape overview/Observable.ts

  section
    h2 Operators
    //+mermaid.
    //  graph LR
    //  style O1 stroke-dasharray: 5, 5
    //  style O2 stroke-dasharray: 5, 5
    //
    //  O1(Observable) ==> op(Operator)
    //  op ==> O2(Observable)
    p lift
    p not pure functions




  section
    h2 .pipe()
    p used to avoid spoiling Observable.prototype.
    +js.
      const pipe = (...mapFunctions) => mapFunctions
        .reduce((observable, mapFunction) => mapFunction(observable));